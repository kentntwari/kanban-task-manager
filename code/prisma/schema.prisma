// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @unique
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  email     String? @unique
  picture   String?
  boards    Board[]

  @@index([id])
}

model Board {
  id      String   @id @default(uuid())
  name    String
  columns Column[]
  user    User?    @relation(fields: [userId], references: [id])
  userId  String?

  @@unique([name])
  @@map("boards")
}

model Column {
  id      String  @id @default(uuid())
  name    String
  color   String?
  tasks   Task[]
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boardId String? @map("board_id")

  @@map("columns")
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String
  subTasks    SubTask[]
  column      Column?   @relation(fields: [columnId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  columnId    String?   @map("column_id")

  @@map("tasks")
}

model SubTask {
  id          String  @id @default(uuid())
  title       String
  isCompleted Boolean @map("is_completed")
  task        Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId      String? @map("task_id")

  @@map("sub_tasks")
}
